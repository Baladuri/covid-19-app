{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tauqe\\\\React projects\\\\covid19-app\\\\covid19-app\\\\src\\\\components\\\\AllCountries.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./AllCountries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllCountries() {\n  _s();\n\n  const [data, setData] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const response = await axios.get(\"https://api.covid19api.com/summary\");\n      console.log(response.data);\n      setData(response.data.Countries);\n    }\n\n    fetchData();\n    const arr = [];\n\n    for (const item of data) {\n      arr.push(item);\n    }\n\n    console.log(arr);\n  }, []);\n  let dataSorted = [];\n  let totalConfirmed = 0;\n  let maxTotalConfirmed = \"\";\n  let sortedIndex = 0;\n  let highestIndex = 0; //while (dataSorted.length < data.length) {\n  //   for (let i = 0; i < data.length; i++) {\n  //     if (i === 0) {\n  //       totalConfirmed = data[i].TotalConfirmed;\n  //     } else if (data[i].TotalConfirmed >= totalConfirmed) {\n  //       totalConfirmed = data[i].TotalConfirmed;\n  //       maxTotalConfirmed = data[i];\n  //       highestIndex = i;\n  //     }\n  //   }\n  //   Object.entries(data).splice(highestIndex,1);\n  //   Object.entries(data).splice(sortedIndex - 1, maxTotalConfirmed);\n  //   dataSorted.push(maxTotalConfirmed);\n  //   //}\n  //   arr.sort((a,b) => a.TotalConfirmed)\n  //   console.log(dataSorted);\n  //   console.log(maxTotalConfirmed);\n  //   console.log(highestIndex);\n  //console.log(Math.max(...dataSorted));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countries__container\",\n    children: Object.values(data).map(country => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.Country\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.TotalConfirmed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.NewConfirmed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.ToalDeaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.NewDeaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.TotalRecovered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: country.NewRecovered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, country.ID, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllCountries, \"SdShWBeHkV26fLNog65mn1O2hHw=\");\n\n_c = AllCountries;\nexport default AllCountries;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCountries\");","map":{"version":3,"sources":["C:/Users/tauqe/React projects/covid19-app/covid19-app/src/components/AllCountries.js"],"names":["React","useEffect","useState","axios","AllCountries","data","setData","fetchData","response","get","console","log","Countries","arr","item","push","dataSorted","totalConfirmed","maxTotalConfirmed","sortedIndex","highestIndex","Object","values","map","country","Country","TotalConfirmed","NewConfirmed","ToalDeaths","NewDeaths","TotalRecovered","NewRecovered","ID"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeM,SAAf,GAA2B;AACzB,YAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,oCAAV,CAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACH,IAArB;AACAC,MAAAA,OAAO,CAACE,QAAQ,CAACH,IAAT,CAAcO,SAAf,CAAP;AACD;;AACDL,IAAAA,SAAS;AACT,UAAMM,GAAG,GAAG,EAAZ;;AACA,SAAK,MAAMC,IAAX,IAAmBT,IAAnB,EAAyB;AACvBQ,MAAAA,GAAG,CAACE,IAAJ,CAASD,IAAT;AACD;;AAEDJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAIG,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,YAAY,GAAG,CAAnB,CArBsB,CAsBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,cACGC,MAAM,CAACC,MAAP,CAAcjB,IAAd,EAAoBkB,GAApB,CAAyBC,OAAD,iBACvB;AAAA,8BACE;AAAA,kBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKD,OAAO,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAKF,OAAO,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAKH,OAAO,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAKJ,OAAO,CAACK;AAAb;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,kBAAKL,OAAO,CAACM;AAAb;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA,kBAAKN,OAAO,CAACO;AAAb;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA,OAAUP,OAAO,CAACQ,EAAlB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAzDQ5B,Y;;KAAAA,Y;AA2DT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./AllCountries.css\";\r\n\r\nfunction AllCountries() {\r\n  const [data, setData] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await axios.get(\"https://api.covid19api.com/summary\");\r\n      console.log(response.data);\r\n      setData(response.data.Countries);\r\n    }\r\n    fetchData();\r\n    const arr = [];\r\n    for (const item of data) {\r\n      arr.push(item);\r\n    }\r\n\r\n    console.log(arr);\r\n  }, []);\r\n\r\n  let dataSorted = [];\r\n  let totalConfirmed = 0;\r\n  let maxTotalConfirmed = \"\";\r\n  let sortedIndex = 0;\r\n  let highestIndex = 0;\r\n  //while (dataSorted.length < data.length) {\r\n  //   for (let i = 0; i < data.length; i++) {\r\n  //     if (i === 0) {\r\n  //       totalConfirmed = data[i].TotalConfirmed;\r\n  //     } else if (data[i].TotalConfirmed >= totalConfirmed) {\r\n  //       totalConfirmed = data[i].TotalConfirmed;\r\n  //       maxTotalConfirmed = data[i];\r\n  //       highestIndex = i;\r\n  //     }\r\n  //   }\r\n  //   Object.entries(data).splice(highestIndex,1);\r\n  //   Object.entries(data).splice(sortedIndex - 1, maxTotalConfirmed);\r\n  //   dataSorted.push(maxTotalConfirmed);\r\n  //   //}\r\n\r\n  //   arr.sort((a,b) => a.TotalConfirmed)\r\n  //   console.log(dataSorted);\r\n  //   console.log(maxTotalConfirmed);\r\n  //   console.log(highestIndex);\r\n  //console.log(Math.max(...dataSorted));\r\n  return (\r\n    <div className=\"countries__container\">\r\n      {Object.values(data).map((country) => (\r\n        <div key={country.ID}>\r\n          <h3>{country.Country}</h3>\r\n          <h3>{country.TotalConfirmed}</h3>\r\n          <h3>{country.NewConfirmed}</h3>\r\n          <h3>{country.ToalDeaths}</h3>\r\n          <h3>{country.NewDeaths}</h3>\r\n          <h3>{country.TotalRecovered}</h3>\r\n          <h3>{country.NewRecovered}</h3>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllCountries;\r\n"]},"metadata":{},"sourceType":"module"}